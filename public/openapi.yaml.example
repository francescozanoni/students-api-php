openapi: 3.0.0
info:
  title: Student management API
  version: 1.0.0
servers:
  - url: http://localhost
paths:
  /students:
    get:
      summary: Returns a list of students
      operationId: getStudents
      tags:
        - students
      responses:
        '200':
          $ref: '#/components/responses/Students'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Creates a new student
      operationId: createStudent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewStudent'
      tags:
        - students
      responses:
        '200':
          $ref: '#/components/responses/Student'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /students/{id}:
    get:
      summary: Returns a student
      operationId: getStudentById
      tags:
        - students
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the student to retrieve
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Student'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Updates a student
      operationId: updateStudentById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewStudent'
      tags:
        - students
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the student to update
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Student'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Deletes a student
      operationId: deleteStudentById
      tags:
        - students
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the student to delete
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/ResourceDeletion'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /annotations:
    get:
      summary: Returns a list of annotations
      operationId: getAnnotations
      tags:
        - annotations
      responses:
        '200':
          $ref: '#/components/responses/Annotations'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Creates a new annotation
      operationId: createAnnotation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAnnotation'
      tags:
        - annotations
      responses:
        '200':
          $ref: '#/components/responses/Annotation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /annotations/{id}:
    get:
      summary: Returns an annotation
      operationId: getAnnotationById
      tags:
        - annotations
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the annotation to retrieve
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Annotation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Updates an annotation
      operationId: updateAnnotationById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAnnotation'
      tags:
        - annotations
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the annotation to update
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Annotation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Deletes an annotation
      operationId: deleteAnnotationById
      tags:
        - annotations
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the annotation to delete
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/ResourceDeletion'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /students/{id}/annotations:
    get:
      summary: Return the list of a student's annotations
      operationId: getStudentAnnotations
      tags:
        - annotations
        - students
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the student
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Annotations'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Creates a new annotation
      operationId: createStudentAnnotation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAnnotation'
      tags:
        - annotations
        - students
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the annotation's student
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Annotation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  responses:
    BadRequest:
      description: Response reporting invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                description: HTTP status code
              status:
                type: string
                description: HTTP status description
              message:
                type: string
                description: Reason making request invalid
              validation:
                type: object
                description: Input item making request invalid
            required:
              - status_code
              - status
              - message
            example:
              status_code: 400
              status: Bad Request
              message: Request is not valid
              data:
                - id:
                  - code error_type
                  - value abc
                  - expected integer
                  - used string
    NotFound:
      description: Generic response reporting no resource(s) found
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                description: HTTP status code
              status:
                type: string
                description: HTTP status description
              message:
                type: string
            required:
              - status_code
              - status
              - message
            example:
              status_code: 404
              status: Not Found
              message: Resource(s) not found
    InternalServerError:
      description: Generic response reporting an unexpected error (default format of hapi framework)
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                description: HTTP status code
              status:
                type: string
                description: HTTP status description
              message:
                type: string
            required:
              - status_code
              - status
              - message
            example:
              status_code: 500
              status: Internal Server Error
              message: An internal server error occurred
    Students:
      description: Response returning a list of students
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                description: HTTP status code
              status:
                type: string
                description: HTTP status description
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
            required:
              - status_code
              - status
              - message
              - data
            example:
              status_code: 200
              status: OK
              message: Resource(s) found
              data:
                - id: 1
                  first_name: John
                  last_name: Doe
                  e_mail: john.doe@foo.com
                  phone: 1234-567890
                  nationality: UK
                - id: 2
                  first_name: Joan
                  last_name: Doe
                  e_mail: joan.doe@bar.com
                  phone: null
                  nationality: CA
    Student:
      description: Response returning a student
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                description: HTTP status code
              status:
                type: string
                description: HTTP status description
              message:
                type: string
              data:
                $ref: '#/components/schemas/Student'
            required:
              - status_code
              - status
              - message
              - data
            example:
              status_code: 200
              status: OK
              message: Resource successfully retrieved/created/modified
              data:
                id: 1
                first_name: John
                last_name: Doe
                e_mail: john.doe@foo.com
                phone: 1234-567890
                nationality: UK
    Annotations:
      description: Response returning a list of annotations
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                description: HTTP status code
              status:
                type: string
                description: HTTP status description
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Annotation'
            required:
              - status_code
              - status
              - message
              - data
            example:
              status_code: 200
              status: OK
              message: Resource(s) found
              data:
                - id: 1
                  title: First annotation title
                  body: First annotation body
                - id: 2
                  title: Second annotation title
                  body: Second annotation body
    Annotation:
      description: Response returning a annotation
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                description: HTTP status code
              status:
                type: string
                description: HTTP status description
              message:
                type: string
              data:
                $ref: '#/components/schemas/Annotation'
            required:
              - status_code
              - status
              - message
              - data
            example:
              status_code: 200
              status: OK
              message: Resource successfully retrieved/created/modified
              data:
                id: 1
                title: First annotation title
                content: First annotation body
                user_id: 123
                student:
                  id: 1
                  first_name: John
                  last_name: Doe
                  e_mail: john.doe@foo.com
                  phone: 1234-567890
                  nationality: UK
                created_at: '2019-01-01 01:00:00'
                updated_at: '2019-01-01 01:00:00'
    ResourceDeletion:
      description: Response confirming deletion of a resource
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                description: HTTP status code
              status:
                type: string
                description: HTTP status description
              message:
                type: string
            required:
              - status_code
              - status
              - message
            example:
              status_code: 200
              status: OK
              message: Resource deleted
  schemas:
    NewStudent:
      type: object
      properties:
        first_name:
          type: string
          minLength: 2
        last_name:
          type: string
          minLength: 2
        e_mail:
          type: string
        phone:
          type: string
        nationality:
          type: string
          pattern: '^[A-Z]{2}$'
      required:
        - first_name
        - last_name
        - e_mail
        - nationality
      example:
        first_name: John
        last_name: Doe
        e_mail: john.doe@foo.com
        phone: 1234-567890
        nationality: UK
    Student:
      allOf:
        - $ref: '#/components/schemas/NewStudent'
        - type: object
          properties:
            id:
              type: integer
          required:
            - id
      example:
        id: 1
        first_name: John
        last_name: Doe
        e_mail: john.doe@foo.com
        phone: 1234-567890
        nationality: UK
    NewAnnotation:
      type: object
      properties:
        title:
          type: string
          minLength: 3
        content:
          type: string
          minLength: 3
        user_id:
          type: integer
      required:
        - title
        - content
        - user_id
      example:
        title: First annotation title
        content: First annotation body
        user_id: 123
    Annotation:
      allOf:
        - $ref: '#/components/schemas/NewAnnotation'
        - type: object
          properties:
            id:
              type: integer
            student:
              $ref: '#/components/schemas/NewStudent'
            created_at:
              type: string
              pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$'
            updated_at:
              type: string
              pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$'
          required:
            - id
            # student is not required because it is omitted in case student ID is a path parameter
            - created_at
      example:
        id: 1
        title: First annotation title
        content: First annotation body
        user_id: 123
        student:
          id: 1
          first_name: John
          last_name: Doe
          e_mail: john.doe@foo.com
          phone: 1234-567890
          nationality: UK
        created_at: '2019-01-01 01:00:00'
        updated_at: '2019-01-01 01:00:00'
